# Copyright (C) 2016 Wind River Systems, Inc.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2 as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA

# This needs to run after anspass is installed by the buildtools-tarball
# Transfer askpass to anspass
anspass_transfer() {
	urls=""
	type=unknown
	while read line; do
		case "$line" in
			Username*)
				url=$(echo $line | sed "s,Username for '\(.*\)': *,\1,")
				type=username
				;;
			Password*)
				url=$(echo $line | sed "s,Password for '\(.*\)': *,\1,")
				url=$(echo $url | sed "s,\([^:]*://\)\(.*\)@\([^@]*\),\1\3,")
				type=password
				;;
			*)
				if [ $type == "unknown" -o -z "$line" ] ; then
					continue
				fi
				murl=$(echo $url | sed 's,[-:/.@],_,g')
				if [ "${urls}" == "${urls/$murl/}" ]; then
					urls="$urls $murl"
				fi
				eval url_${murl}="${url}"
				case $type in
					username)
						eval username_${murl}=\${line}
						;;
					password)
						eval password_${murl}=\${line}
						;;
				esac
				;;
		esac
	done

	for murl in $urls ; do
		anspass_transfer_dump | eval anspass-ctrl --add \${url_${murl}} > /dev/null 2>&1
	done
}

anspass_transfer_dump() {
	eval echo \${username_${murl}}
	eval echo \${password_${murl}}
	eval echo \${password_${murl}}
}

anspass_check_credential() {
	err=$(LANG=C git ls-remote $REMOTEURL 2>&1 >/dev/null)
	ret=$?
	if [ $ret -ne 0 ] && [ "${err}" != "${err/Authentication/}" ]; then
		echo
		echo "${err}"
		while true ; do
			echo
			echo "The saved user or password seems invalid, remove it and try again?"
			read -p "Remove the anspass db bin/.anspass? [Yes/No]" accept
			case ${accept} in
				[yY][eE][sS])
					anspass_stop
					rm -rf ${PWD}/bin/.anspass
					break
					;;
				[nN][oO])
					break
					;;
				*)
					echo "Only yes and no are accepted." >&2
					;;
			esac
		done
	fi
}

anspass_start() {
	# Do we have anspassd available yet?
	if ! which anspassd >/dev/null 2>&1 ; then
		return 0
	fi

	# Have we already configured anspass?
	if [ -n "${ANSPASS_PATH}" -a -n "${ANSPASS_TOKEN}" ]; then
		return 0
	fi

	echo "Starting anspass..."

	export ANSPASS_PATH=${PWD}/bin/.anspass
	result=$(anspassd < /dev/null 2>&1)
	if [ $? -ne 0 ]; then
		echo "anspassd failed to start:"
		echo "${result}"
		return 1
	fi
	export ANSPASS_TOKEN=$(echo "$result" | grep "Token:" | head -n 1 | sed 's,Token: ,,')
	#echo "Token: ${ANSPASS_TOKEN}"
	wrl_anspass_started=1

	return 0
}


anspass_setup() {
	# Do we have anspassd available yet?
	if ! which anspassd >/dev/null 2>&1 ; then
		return 0
	fi

	# Have we already configured anspass?
	if [ -n "${ANSPASS_PATH}" -a -n "${ANSPASS_TOKEN}" ]; then
		return 0
	fi

	WINDSHARE_SCHEME=$(echo ${BASEURL} | sed 's,\([^:/]*\).*,\1,')
	if [ -n "${WINDSHARE_SCHEME}" ]; then
		WINDSHARE_HOST=$(echo ${BASEURL} | sed 's,\([^:/]*\)://\([^/]*\).*,\2,')
	fi

	# Has anspass been started before?
	if [ -d ${PWD}/bin/.anspass ]; then
		anspass_start
		rc=$?
		if [ $rc != 0 ]; then
			return $rc
		fi
	else
		return 0
	fi

	# If user/pass passed in, default these first (can't do this for a file path)
	if [ -n "${WINDSHARE_USER}" -a -n "${WINDSHARE_HOST}" ]; then
		# If this has already been set, delete it so we can add the new one
		echo "${WINDSHARE_USER}" | anspass-ctrl --delete ${WINDSHARE_SCHEME}://${WINDSHARE_HOST} > /dev/null 2>&1
		cat << EOF | anspass-ctrl --add ${WINDSHARE_SCHEME}://${WINDSHARE_HOST} > /dev/null 2>&1
${WINDSHARE_USER}
${WINDSHARE_PASS}
${WINDSHARE_PASS}
EOF
		if [ $? -ne 0 ]; then
			echo "Unable to set the credentials for ${WINDSHARE_SCHEME}://${WINDSHARE_HOST}" >&2
			anspass-ctrl --quit > /dev/null 2>&1
			return 1
		fi
	fi
	export GIT_ASKPASS=$(which anspass)
	export SSH_ASKPASS=$(which anspass)

	# check the old credentials works or not
	anspass_check_credential
}

anspass_stop() {
	if [ -n "${ANSPASS_PATH}" -a -n "${ANSPASS_TOKEN}" ]; then
		echo "Stopping anspass..."
		anspass-ctrl --quit >/dev/null 2>&1
		unset ANSPASS_PATH
		unset ANSPASS_TOKEN
	fi
}
